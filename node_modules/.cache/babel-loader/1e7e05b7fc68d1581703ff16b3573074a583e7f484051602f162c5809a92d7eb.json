{"ast":null,"code":"var _jsxFileName = \"C:\\\\HP\\\\app\\\\src\\\\UpdateEmployeePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateEmployeePage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [employeeData, setEmployeeData] = useState({\n    first_name: '',\n    last_name: '',\n    department: '',\n    salary: '',\n    dob: '' // Add a DOB field\n  });\n\n  const [errorMessage, setErrorMessage] = useState(''); // State for error messages\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEmployeeData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleUpdateEmployee = () => {\n    // Fetch existing employees' DOBs from your API\n    fetch('http://localhost:3001/employees').then(response => response.json()).then(data => {\n      // Check if the entered DOB matches any existing employee's DOB\n      const dobMatches = data.some(employee => employee.dob === employeeData.dob);\n      if (dobMatches) {\n        setErrorMessage('Employee with the same DOB already exists.');\n      } else {\n        // Perform the update operation if there is no match\n        fetch(`http://localhost:3001/update/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(employeeData)\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error('Error updating employee');\n          }\n          return response.json();\n        }).then(data => {\n          console.log('Employee updated:', data);\n          navigate('/dashboard');\n        }).catch(error => {\n          console.error('Error updating employee:', error);\n        });\n      }\n    }).catch(error => {\n      console.error('Error fetching employees:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Employee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"first_name\",\n        placeholder: \"First Name\",\n        value: employeeData.first_name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"last_name\",\n        placeholder: \"Last Name\",\n        value: employeeData.last_name,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"department\",\n        placeholder: \"Department\",\n        value: employeeData.department,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"salary\",\n        placeholder: \"Salary\",\n        value: employeeData.salary,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"dob\",\n        placeholder: \"DOB (dd/mm/yyyy)\" // Add a DOB input field\n        ,\n        value: employeeData.dob,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateEmployee,\n        children: \"Update Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(UpdateEmployeePage, \"gqM4Dl8SL3fF29oaJj5eZZMveCs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateEmployeePage;\nexport default UpdateEmployeePage;\nvar _c;\n$RefreshReg$(_c, \"UpdateEmployeePage\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","jsxDEV","_jsxDEV","UpdateEmployeePage","_s","id","navigate","employeeData","setEmployeeData","first_name","last_name","department","salary","dob","errorMessage","setErrorMessage","handleInputChange","e","name","value","target","prevData","handleUpdateEmployee","fetch","then","response","json","data","dobMatches","some","employee","method","headers","body","JSON","stringify","ok","Error","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/HP/app/src/UpdateEmployeePage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nfunction UpdateEmployeePage() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [employeeData, setEmployeeData] = useState({\r\n        first_name: '',\r\n        last_name: '',\r\n        department: '',\r\n        salary: '',\r\n        dob: '' // Add a DOB field\r\n    });\r\n\r\n    const [errorMessage, setErrorMessage] = useState(''); // State for error messages\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setEmployeeData((prevData) => ({ ...prevData, [name]: value }));\r\n    };\r\n\r\n    const handleUpdateEmployee = () => {\r\n        // Fetch existing employees' DOBs from your API\r\n        fetch('http://localhost:3001/employees')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Check if the entered DOB matches any existing employee's DOB\r\n                const dobMatches = data.some(employee => employee.dob === employeeData.dob);\r\n                if (dobMatches) {\r\n                    setErrorMessage('Employee with the same DOB already exists.');\r\n                } else {\r\n                    // Perform the update operation if there is no match\r\n                    fetch(`http://localhost:3001/update/${id}`, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(employeeData)\r\n                    })\r\n                        .then(response => {\r\n                            if (!response.ok) {\r\n                                throw new Error('Error updating employee');\r\n                            }\r\n                            return response.json();\r\n                        })\r\n                        .then(data => {\r\n                            console.log('Employee updated:', data);\r\n                            navigate('/dashboard');\r\n                        })\r\n                        .catch(error => {\r\n                            console.error('Error updating employee:', error);\r\n                        });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching employees:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Update Employee</h2>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"first_name\"\r\n                    placeholder=\"First Name\"\r\n                    value={employeeData.first_name}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"last_name\"\r\n                    placeholder=\"Last Name\"\r\n                    value={employeeData.last_name}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"department\"\r\n                    placeholder=\"Department\"\r\n                    value={employeeData.department}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"salary\"\r\n                    placeholder=\"Salary\"\r\n                    value={employeeData.salary}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"dob\"\r\n                    placeholder=\"DOB (dd/mm/yyyy)\" // Add a DOB input field\r\n                    value={employeeData.dob}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <button onClick={handleUpdateEmployee}>Update Employee</button>\r\n                {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateEmployeePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}