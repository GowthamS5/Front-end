{"ast":null,"code":"var _jsxFileName = \"C:\\\\MVC20\\\\app\\\\src\\\\componets\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { useForm, Controller } from 'react-hook-form';\nimport RegistrationModal from './RegistrationModal'; // Import the registration modal component\n\nimport './LoginPage.css'; // Import your LoginPage.css for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\n  const handleOpenRegistrationModal = () => {\n    setIsRegistrationModalOpen(true);\n  };\n  const handleCloseRegistrationModal = () => {\n    setIsRegistrationModalOpen(false);\n  };\n  const LoginAction = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        console.log('JWT Token is:', data.token);\n        navigate('/dashboard');\n      } else {\n        console.error('Login failed');\n        Swal.fire({\n          icon: 'error',\n          title: 'Login Failed',\n          text: 'Invalid username or password'\n        });\n      }\n    } catch (error) {\n      console.error('Error login:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred while trying to log in'\n      });\n    }\n  };\n  const RegisterAction = async data => {\n    // Check if passwords match\n    if (data.password !== data.confirmPassword) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Registration Failed',\n        text: 'Passwords do not match'\n      });\n      return;\n    }\n\n    // Your registration logic here\n    try {\n      const response = await fetch('http://localhost:3001/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (response.ok) {\n        Swal.fire({\n          icon: 'success',\n          title: 'Registration Successful',\n          text: 'You can now log in with your new account'\n        }).then(() => {\n          // Redirect to login page or perform any other action\n          navigate('/login');\n        });\n      } else {\n        console.error('Registration failed');\n        Swal.fire({\n          icon: 'error',\n          title: 'Registration Failed',\n          text: 'Failed to register. Please try again later.'\n        });\n      }\n    } catch (error) {\n      console.error('Error registering:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred while trying to register'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Enter Password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      onKeyPress: e => {\n        if (e.key === 'Enter') {\n          LoginAction();\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: LoginAction,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenRegistrationModal,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RegistrationModal, {\n      isOpen: isRegistrationModalOpen,\n      onClose: handleCloseRegistrationModal,\n      onRegister: RegisterAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"rAOhClrQnaW0A0ebZPCpPD/BG5o=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","Swal","useForm","Controller","RegistrationModal","jsxDEV","_jsxDEV","LoginPage","_s","navigate","username","setUsername","password","setPassword","handleSubmit","control","formState","errors","isRegistrationModalOpen","setIsRegistrationModalOpen","handleOpenRegistrationModal","handleCloseRegistrationModal","LoginAction","response","fetch","method","headers","body","JSON","stringify","ok","data","json","localStorage","setItem","token","console","log","error","fire","icon","title","text","RegisterAction","confirmPassword","then","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","isOpen","onClose","onRegister","_c","$RefreshReg$"],"sources":["C:/MVC20/app/src/componets/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport RegistrationModal from './RegistrationModal'; // Import the registration modal component\r\n\r\nimport './LoginPage.css'; // Import your LoginPage.css for styling\r\n\r\nfunction LoginPage() {\r\n  const navigate = useNavigate();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const [isRegistrationModalOpen, setIsRegistrationModalOpen] = useState(false);\r\n\r\n  const handleOpenRegistrationModal = () => {\r\n    setIsRegistrationModalOpen(true);\r\n  };\r\n\r\n  const handleCloseRegistrationModal = () => {\r\n    setIsRegistrationModalOpen(false);\r\n  };\r\n\r\n  const LoginAction = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('token', data.token);\r\n        console.log('JWT Token is:', data.token);\r\n        navigate('/dashboard');\r\n      } else {\r\n        console.error('Login failed');\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Login Failed',\r\n          text: 'Invalid username or password',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error login:', error);\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'An error occurred while trying to log in',\r\n      });\r\n    }\r\n  };\r\n\r\n const RegisterAction = async (data) => {\r\n  // Check if passwords match\r\n  if (data.password !== data.confirmPassword) {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Registration Failed',\r\n      text: 'Passwords do not match',\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Your registration logic here\r\n  try {\r\n    const response = await fetch('http://localhost:3001/auth/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (response.ok) {\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Registration Successful',\r\n        text: 'You can now log in with your new account',\r\n      }).then(() => {\r\n        // Redirect to login page or perform any other action\r\n        navigate('/login');\r\n      });\r\n    } else {\r\n      console.error('Registration failed');\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Registration Failed',\r\n        text: 'Failed to register. Please try again later.',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error registering:', error);\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'An error occurred while trying to register',\r\n    });\r\n  }\r\n}\r\n\r\n\r\n   return (\r\n    <div className=\"login-container\">\r\n      <h2>Login</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Username\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        placeholder=\"Enter Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        onKeyPress={(e) => {\r\n          if (e.key === 'Enter') {\r\n            LoginAction();\r\n          }\r\n        }}\r\n      />\r\n      <button onClick={LoginAction}>Login</button>\r\n      <button onClick={handleOpenRegistrationModal}>Register</button>\r\n\r\n      {/* Registration Modal */}\r\n      <RegistrationModal\r\n        isOpen={isRegistrationModalOpen}\r\n        onClose={handleCloseRegistrationModal}\r\n        onRegister={RegisterAction}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,OAAO,EAAEC,UAAU,QAAQ,iBAAiB;AACrD,OAAOC,iBAAiB,MAAM,qBAAqB,CAAC,CAAC;;AAErD,OAAO,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IACJe,YAAY;IACZC,OAAO;IACPC,SAAS,EAAE;MAAEC;IAAO;EACtB,CAAC,GAAGf,OAAO,CAAC,CAAC;EAEb,MAAM,CAACgB,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE7E,MAAMqB,2BAA2B,GAAGA,CAAA,KAAM;IACxCD,0BAA0B,CAAC,IAAI,CAAC;EAClC,CAAC;EAED,MAAME,4BAA4B,GAAGA,CAAA,KAAM;IACzCF,0BAA0B,CAAC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEnB,QAAQ;UAAEE;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAIW,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;QACzCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAACI,KAAK,CAAC;QACxC1B,QAAQ,CAAC,YAAY,CAAC;MACxB,CAAC,MAAM;QACL2B,OAAO,CAACE,KAAK,CAAC,cAAc,CAAC;QAC7BrC,IAAI,CAACsC,IAAI,CAAC;UACRC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,cAAc;UACrBC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCrC,IAAI,CAACsC,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;EAEF,MAAMC,cAAc,GAAG,MAAOZ,IAAI,IAAK;IACtC;IACA,IAAIA,IAAI,CAACnB,QAAQ,KAAKmB,IAAI,CAACa,eAAe,EAAE;MAC1C3C,IAAI,CAACsC,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,qBAAqB;QAC5BC,IAAI,EAAE;MACR,CAAC,CAAC;MACF;IACF;;IAEA;IACA,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAIR,QAAQ,CAACO,EAAE,EAAE;QACf7B,IAAI,CAACsC,IAAI,CAAC;UACRC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,yBAAyB;UAChCC,IAAI,EAAE;QACR,CAAC,CAAC,CAACG,IAAI,CAAC,MAAM;UACZ;UACApC,QAAQ,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL2B,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;QACpCrC,IAAI,CAACsC,IAAI,CAAC;UACRC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,qBAAqB;UAC5BC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CrC,IAAI,CAACsC,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;EAGE,oBACCpC,OAAA;IAAKwC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BzC,OAAA;MAAAyC,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd7C,OAAA;MACE8C,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,gBAAgB;MAC5BC,KAAK,EAAE5C,QAAS;MAChB6C,QAAQ,EAAGC,CAAC,IAAK7C,WAAW,CAAC6C,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACF7C,OAAA;MACE8C,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,gBAAgB;MAC5BC,KAAK,EAAE1C,QAAS;MAChB2C,QAAQ,EAAGC,CAAC,IAAK3C,WAAW,CAAC2C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,UAAU,EAAGF,CAAC,IAAK;QACjB,IAAIA,CAAC,CAACG,GAAG,KAAK,OAAO,EAAE;UACrBrC,WAAW,CAAC,CAAC;QACf;MACF;IAAE;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF7C,OAAA;MAAQsD,OAAO,EAAEtC,WAAY;MAAAyB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5C7C,OAAA;MAAQsD,OAAO,EAAExC,2BAA4B;MAAA2B,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG/D7C,OAAA,CAACF,iBAAiB;MAChByD,MAAM,EAAE3C,uBAAwB;MAChC4C,OAAO,EAAEzC,4BAA6B;MACtC0C,UAAU,EAAEpB;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3C,EAAA,CAtIQD,SAAS;EAAA,QACCP,WAAW,EAQxBE,OAAO;AAAA;AAAA8D,EAAA,GATJzD,SAAS;AAwIlB,eAAeA,SAAS;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}