{"ast":null,"code":"var _jsxFileName = \"C:\\\\MVC20\\\\app\\\\src\\\\componets\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginPage.css';\nimport Modal from 'react-modal';\nimport { useForm, Controller } from 'react-hook-form';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    },\n    reset,\n    getValues\n  } = useForm();\n  const [isLoginPopOpen, setIsLoginPopOpen] = useState(false);\n  const [isEmployeeLoginPopOpen, setIsEmployeeLoginPopOpen] = useState(false);\n  const [isRegisterPopOpen, setIsRegisterPopOpen] = useState(false);\n  const [showPassword, setShoPassword] = useState(false);\n  const openAdminLoginPop = () => {\n    setIsLoginPopOpen(true);\n  };\n  const closeAdminLoginPop = () => {\n    setIsLoginPopOpen(false);\n    reset();\n  };\n  const openEmployeeLoginPop = () => {\n    setIsEmployeeLoginPopOpen(true);\n  };\n  const closeEmployeeLoginPop = () => {\n    setIsEmployeeLoginPopOpen(false);\n    reset();\n  };\n  const openRegisterPop = () => {\n    setIsRegisterPopOpen(true);\n  };\n  const closeRegisterPop = () => {\n    setIsRegisterPopOpen(false);\n    reset();\n  };\n  const validateConfirmPassword = value => {\n    const passwordValue = getValues('password');\n    return value === passwordValue || 'Passwords do not match';\n  };\n  const handleEmployeeLogin = async data => {\n    try {\n      const response = await fetch('http://localhost:3001/auth/employee-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          employeeId: data.employeeId,\n          // Assuming your employee ID field is named \"employeeId\" in the form\n          password: data.password\n        })\n      });\n      if (response.ok) {\n        const responseData = await response.json();\n        localStorage.setItem('token', responseData.token);\n        console.log('JWT Token is:', responseData.token);\n        navigate('/dashboard'); // Redirect to the dashboard or another page upon successful login\n        closeEmployeeLoginPop();\n      } else {\n        console.error('Employee login failed');\n        Swal.fire({\n          icon: 'error',\n          title: 'Employee Login Failed',\n          text: 'Invalid employee ID or password'\n        });\n      }\n    } catch (error) {\n      console.error('Error employee login:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred while trying to log in as an employee'\n      });\n    }\n  };\n  const handleAdminLogin = async data => {\n    try {\n      const response = await fetch('http://localhost:3001/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          adminUsername: data.adminUsername,\n          // Assuming your admin username field is named \"adminUsername\" in the form\n          adminPassword: data.adminPassword // Assuming your admin password field is named \"adminPassword\" in the form\n        })\n      });\n\n      if (response.ok) {\n        const responseData = await response.json();\n        localStorage.setItem('adminToken', responseData.token);\n        console.log('Admin JWT Token is:', responseData.token);\n        // You can perform admin-specific actions or navigate to an admin dashboard here\n        closeAdminLoginPop();\n      } else {\n        console.error('Admin login failed');\n        Swal.fire({\n          icon: 'error',\n          title: 'Admin Login Failed',\n          text: 'Invalid admin username or password'\n        });\n      }\n    } catch (error) {\n      console.error('Error admin login:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred while trying to log in as an admin'\n      });\n    }\n  };\n  const handleRegister = async data => {\n    try {\n      const response = await fetch('http://localhost:3001/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: data.username,\n          email: data.email,\n          password: data.password,\n          confirmPassword: data.confirmPassword\n        })\n      });\n      if (response.ok) {\n        Swal.fire({\n          icon: 'success',\n          title: 'Registration Successful',\n          text: 'You can now log in with your new account'\n        });\n        closeRegisterPop();\n      } else {\n        console.error('Registration failed');\n        Swal.fire({\n          icon: 'error',\n          title: 'Registration Failed',\n          text: 'Failed to register. Please try again later.'\n        });\n      }\n    } catch (error) {\n      console.error('Error registering:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'An error occurred while trying to register'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openAdminLoginPop,\n      children: \"Admin Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openEmployeeLoginPop,\n      children: \"Employee Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openRegisterPop,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isLoginPopOpen,\n      onRequestClose: closeAdminLoginPop,\n      contentLabel: \"Admin Login Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employee Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleEmployeeLogin),\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"employeeId\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Employee ID is required'\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter Employee ID\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this), errors.employeeId && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.employeeId.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"password\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Password is required'\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter Password\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.password.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeEmployeeLoginPop,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isEmployeeLoginPopOpen,\n      onRequestClose: closeEmployeeLoginPop,\n      contentLabel: \"Employee Login Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employee Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleAdminLogin),\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"adminUsername\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Admin Username is required'\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter Admin Username\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this), errors.adminUsername && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.adminUsername.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"adminPassword\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Admin Password is required'\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter Admin Password\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this), errors.adminPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.adminPassword.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeAdminLoginPop,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this), \")}\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isRegisterPopOpen,\n      onRequestClose: closeRegisterPop,\n      contentLabel: \"Registration Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleRegister),\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"username\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Username is required',\n            minLength: {\n              value: 3,\n              message: 'Username should be at least 3 characters'\n            },\n            maxLength: {\n              value: 25,\n              message: 'Username should not exceed 25 characters'\n            }\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Username (3-25 characters)\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this), errors.username && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.username.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"email\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Email is required',\n            pattern: {\n              value: /^\\S+@\\S+$/i,\n              message: 'Invalid email address'\n            }\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter valid Email\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.email.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"password\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Password is required',\n            minLength: {\n              value: 3,\n              message: 'Password should be at least 3 characters long'\n            },\n            maxLength: {\n              value: 25,\n              message: 'Password should not exceed 25 characters'\n            }\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Password (3-25 characters)\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.password.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"confirmPassword\",\n          control: control,\n          defaultValue: \"\",\n          rules: {\n            required: 'Confirm Password is required',\n            validate: validateConfirmPassword\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Confirm Password (min 6-25 characters)\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this), errors.confirmPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error\",\n              children: errors.confirmPassword.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: closeRegisterPop,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 8\n  }, this);\n}\n_s(LoginPage, \"up6Q4eqo/z5JrM1Lp2DflkzP52k=\", false, function () {\n  return [useNavigate, useForm];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","Modal","useForm","Controller","Swal","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","handleSubmit","control","formState","errors","reset","getValues","isLoginPopOpen","setIsLoginPopOpen","isEmployeeLoginPopOpen","setIsEmployeeLoginPopOpen","isRegisterPopOpen","setIsRegisterPopOpen","showPassword","setShoPassword","openAdminLoginPop","closeAdminLoginPop","openEmployeeLoginPop","closeEmployeeLoginPop","openRegisterPop","closeRegisterPop","validateConfirmPassword","value","passwordValue","handleEmployeeLogin","data","response","fetch","method","headers","body","JSON","stringify","employeeId","password","ok","responseData","json","localStorage","setItem","token","console","log","error","fire","icon","title","text","handleAdminLogin","adminUsername","adminPassword","handleRegister","username","email","confirmPassword","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onRequestClose","contentLabel","onSubmit","name","defaultValue","rules","required","render","field","type","placeholder","message","minLength","maxLength","pattern","validate","_c","$RefreshReg$"],"sources":["C:/MVC20/app/src/componets/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LoginPage.css';\r\nimport Modal from 'react-modal';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction LoginPage() {\r\n  const navigate = useNavigate();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n    reset,\r\n    getValues,\r\n  } = useForm();\r\n\r\n  const [isLoginPopOpen, setIsLoginPopOpen] = useState(false);\r\n  const [isEmployeeLoginPopOpen, setIsEmployeeLoginPopOpen] = useState(false);\r\n  const [isRegisterPopOpen, setIsRegisterPopOpen] = useState(false);\r\n  const [showPassword, setShoPassword] = useState(false);\r\n\r\n  const openAdminLoginPop = () => {\r\n    setIsLoginPopOpen(true);\r\n  };\r\n\r\n  const closeAdminLoginPop = () => {\r\n    setIsLoginPopOpen(false);\r\n    reset();\r\n  };\r\n\r\n  const openEmployeeLoginPop = () => {\r\n    setIsEmployeeLoginPopOpen(true);\r\n  };\r\n\r\n  const closeEmployeeLoginPop = () => {\r\n    setIsEmployeeLoginPopOpen(false);\r\n    reset();\r\n  };\r\n\r\n  const openRegisterPop = () => {\r\n    setIsRegisterPopOpen(true);\r\n  };\r\n\r\n  const closeRegisterPop = () => {\r\n    setIsRegisterPopOpen(false);\r\n    reset();\r\n  };\r\n\r\n  const validateConfirmPassword = (value) => {\r\n    const passwordValue = getValues('password');\r\n    return value === passwordValue || 'Passwords do not match';\r\n  };\r\n\r\n  const handleEmployeeLogin = async (data) => {\r\n  try {\r\n    const response = await fetch('http://localhost:3001/auth/employee-login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        employeeId: data.employeeId, // Assuming your employee ID field is named \"employeeId\" in the form\r\n        password: data.password,\r\n      }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const responseData = await response.json();\r\n      localStorage.setItem('token', responseData.token);\r\n      console.log('JWT Token is:', responseData.token);\r\n      navigate('/dashboard'); // Redirect to the dashboard or another page upon successful login\r\n      closeEmployeeLoginPop();\r\n    } else {\r\n      console.error('Employee login failed');\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Employee Login Failed',\r\n        text: 'Invalid employee ID or password',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error employee login:', error);\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'An error occurred while trying to log in as an employee',\r\n    });\r\n  }\r\n};\r\n\r\n\r\n const handleAdminLogin = async (data) => {\r\n  try {\r\n    const response = await fetch('http://localhost:3001/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        adminUsername: data.adminUsername, // Assuming your admin username field is named \"adminUsername\" in the form\r\n        adminPassword: data.adminPassword, // Assuming your admin password field is named \"adminPassword\" in the form\r\n      }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const responseData = await response.json();\r\n      localStorage.setItem('adminToken', responseData.token);\r\n      console.log('Admin JWT Token is:', responseData.token);\r\n      // You can perform admin-specific actions or navigate to an admin dashboard here\r\n      closeAdminLoginPop();\r\n    } else {\r\n      console.error('Admin login failed');\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Admin Login Failed',\r\n        text: 'Invalid admin username or password',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error admin login:', error);\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'An error occurred while trying to log in as an admin',\r\n    });\r\n  }\r\n};\r\n\r\n\r\n  const handleRegister = async (data) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: data.username,\r\n          email: data.email,\r\n          password: data.password,\r\n          confirmPassword: data.confirmPassword,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Registration Successful',\r\n          text: 'You can now log in with your new account',\r\n        });\r\n        closeRegisterPop();\r\n      } else {\r\n        console.error('Registration failed');\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Registration Failed',\r\n          text: 'Failed to register. Please try again later.',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error registering:', error);\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'An error occurred while trying to register',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n      \r\n       <div className=\"login-container\">\r\n    <h2>Welcome</h2>\r\n    <button onClick={openAdminLoginPop}>Admin Login</button>\r\n    <button onClick={openEmployeeLoginPop}>Employee Login</button>\r\n    <button onClick={openRegisterPop}>Register</button>\r\n\r\n      {/* admin Login */}\r\n      <Modal\r\n      isOpen={isLoginPopOpen}\r\n      onRequestClose={closeAdminLoginPop}\r\n      contentLabel=\"Admin Login Modal\"\r\n    >\r\n       <h2>Employee Login</h2>\r\n      <form onSubmit={handleSubmit(handleEmployeeLogin)}>\r\n            <Controller\r\n              name=\"employeeId\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              rules={{\r\n                required: 'Employee ID is required',\r\n              }}\r\n              render={({ field }) => (\r\n                <>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Employee ID\"\r\n                    {...field}\r\n                  />\r\n                  {errors.employeeId && (\r\n                    <p className=\"error\">{errors.employeeId.message}</p>\r\n                  )}\r\n                </>\r\n              )}\r\n            />\r\n            <Controller\r\n              name=\"password\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              rules={{\r\n                required: 'Password is required',\r\n              }}\r\n              render={({ field }) => (\r\n                <>\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Password\"\r\n                    {...field}\r\n                  />\r\n                  {errors.password && (\r\n                    <p className=\"error\">{errors.password.message}</p>\r\n                  )}\r\n                </>\r\n              )}\r\n            />\r\n            <button type=\"submit\">Login</button>\r\n        <button className=\"close-button\" onClick={closeEmployeeLoginPop}>\r\n          Close\r\n        </button>\r\n      </form>\r\n    </Modal>\r\n    \r\n {/* adminLogin */}\r\n    <Modal\r\n      isOpen={isEmployeeLoginPopOpen}\r\n      onRequestClose={closeEmployeeLoginPop}\r\n      contentLabel=\"Employee Login Modal\"\r\n    >\r\n      <h2>Employee Login</h2>\r\n      <form onSubmit={handleSubmit(handleAdminLogin)}>\r\n            <Controller\r\n              name=\"adminUsername\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              rules={{\r\n                required: 'Admin Username is required',\r\n              }}\r\n              render={({ field }) => (\r\n                <>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter Admin Username\"\r\n                    {...field}\r\n                  />\r\n                  {errors.adminUsername && (\r\n                    <p className=\"error\">{errors.adminUsername.message}</p>\r\n                  )}\r\n                </>\r\n              )}\r\n            />\r\n            <Controller\r\n              name=\"adminPassword\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              rules={{\r\n                required: 'Admin Password is required',\r\n              }}\r\n              render={({ field }) => (\r\n                <>\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Enter Admin Password\"\r\n                    {...field}\r\n                  />\r\n                  {errors.adminPassword && (\r\n                    <p className=\"error\">{errors.adminPassword.message}</p>\r\n                  )}\r\n                </>\r\n              )}\r\n            />\r\n            <button type=\"submit\">Login</button>\r\n            <button className=\"close-button\" onClick={closeAdminLoginPop}>Close</button>\r\n          </form>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Registration */}\r\n      <Modal\r\n        isOpen={isRegisterPopOpen}\r\n        onRequestClose={closeRegisterPop}\r\n        contentLabel=\"Registration Modal\"\r\n      >\r\n        <h2>Register</h2>\r\n        <form onSubmit={handleSubmit(handleRegister)}>\r\n          <Controller\r\n            name=\"username\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            rules={{\r\n              required: 'Username is required',\r\n              minLength: {\r\n                value: 3,\r\n                message: 'Username should be at least 3 characters',\r\n              },\r\n              maxLength: {\r\n                value: 25,\r\n                message: 'Username should not exceed 25 characters',\r\n              },\r\n            }}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Username (3-25 characters)\"\r\n                  {...field}\r\n                />\r\n                {errors.username && (\r\n                  <p className=\"error\">{errors.username.message}</p>\r\n                )}\r\n              </>\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"email\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            rules={{\r\n              required: 'Email is required',\r\n              pattern: {\r\n                value: /^\\S+@\\S+$/i,\r\n                message: 'Invalid email address',\r\n              },\r\n            }}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter valid Email\"\r\n                  {...field}\r\n                />\r\n                {errors.email && (\r\n                  <p className=\"error\">{errors.email.message}</p>\r\n                )}\r\n              </>\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"password\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            rules={{\r\n              required: 'Password is required',\r\n              minLength: {\r\n                value: 3,\r\n                message: 'Password should be at least 3 characters long',\r\n              },\r\n              maxLength: {\r\n                value: 25,\r\n                message: 'Password should not exceed 25 characters',\r\n              },\r\n            }}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Password (3-25 characters)\"\r\n                  {...field}\r\n                />\r\n                {errors.password && (\r\n                  <p className=\"error\">{errors.password.message}</p>\r\n                )}\r\n              </>\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"confirmPassword\"\r\n            control={control}\r\n            defaultValue=\"\"\r\n            rules={{\r\n              required: 'Confirm Password is required',\r\n              validate: validateConfirmPassword,\r\n            }}\r\n            render={({ field }) => (\r\n              <>\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Confirm Password (min 6-25 characters)\"\r\n                  {...field}\r\n                />\r\n                {errors.confirmPassword && (\r\n                  <p className=\"error\">{errors.confirmPassword.message}</p>\r\n                )}\r\n              </>\r\n            )}\r\n          />\r\n          <button type=\"submit\">Register</button>\r\n          <button className=\"close-button\" onClick={closeRegisterPop}>Close</button>\r\n        </form>\r\n      </Modal>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}